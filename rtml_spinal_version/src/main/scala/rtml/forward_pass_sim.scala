package rtml

import spinal.core._
import spinal.sim._
import spinal.core.sim._
import spinal.lib._
import spinal.lib.bus.bram._

import scala.collection.mutable
import scala.util.Random
import scala.collection.mutable.ArrayBuffer


// TODO: Use actual correct "BRAMMemoryAgent" approach to allow snooping on the bus and modeling delays.
// Note: "lower-able" BRAM dummy component to use for now.
class BRAMMemory(config: BRAMConfig, initialContent: Seq[Bits]) extends Component {
  val bus = slave(BRAM(config))
  val mem = Mem(Bits(32 bits), 1 << config.addressWidth) init(initialContent) // Infer a RAM with correct size.

  mem.write(
    enable  = bus.we.orR,
    address = bus.addr,
    data    = bus.wrdata
  )

  bus.rddata := mem.readSync(
    enable  = bus.en,
    address = bus.addr
  )
}

object ForwardPassSim {
  val states = Map(0 -> "Idle", 1 -> "Work", 2 -> "Done")
  //.map(_.toString).map(B("32'd"+ _))
  var input_BRAM_contents = ArrayBuffer(262144, 262400, 262657, 262914, 263172, 263430, 263689, 263948, 264208, 264468, 264729, 264990, 265252, 265514, 265777, 266041, 266305, 266569, 266834, 267099, 267365, 267632, 267899, 268167, 268435, 268704, 268973, 269243, 269513, 269784, 270055, 270327, 270600, 270873, 271146, 271421, 271695, 271971, 272246, 272523, 272800, 273077, 273355, 273634, 273913, 274193, 274473, 274754, 275036, 275318, 275601, 275884, 276168, 276452, 276737, 277023, 277309, 277596, 277883, 278171, 278460, 278749, 279038, 279329, 279620, 279911, 280204, 280496, 280790, 281084, 281378, 281674, 281970, 282266, 282563, 282861, 283159, 283458, 283758, 284058, 284359, 284661, 284963, 285266, 285569, 285873, 286178, 286483, 286790, 287096, 287404, 287712, 288020, 288330, 288640, 288950, 289262, 289574, 289887, 290200, 290514, 290829, 291144, 291460, 291777, 292095, 292413, 292732, 293051, 293372, 293693, 294014, 294337, 294660, 294984, 295308, 295633, 295959, 296286, 296613, 296941, 297270, 297600, 297930, 298261, 298593, 298925, 299259, 299593, 299927, 300263, 300599, 300936, 301274, 301612, 301952, 302292, 302632, 302974, 303316, 303660, 304003, 304348, 304694, 305040, 305387, 305735, 306083, 306433, 306783, 307134, 307486, 307838, 308192, 308546, 308901, 309257, 309614, 309971, 310330, 310689, 311049, 311410, 311771, 312134, 312497, 312861, 313226, 313592, 313959, 314327, 314695, 315065, 315435, 315806, 316178, 316551, 316924, 317299, 317675, 318051, 318428, 318806, 319186, 319566, 319946, 320328, 320711, 321095, 321479, 321865, 322251, 322638, 323027, 323416, 323806, 324197, 324589, 324982, 325376, 325771, 326167, 326563, 326961, 327360, 327760, 328160, 328562, 328965, 329368, 329773, 330178, 330585, 330993, 331401, 331811, 332222, 332633, 333046, 333460, 333874, 334290, 334707, 335125, 335544, 335964, 336385, 336807, 337230, 337654, 338079, 338506, 338933, 339362, 339791, 340222, 340654, 341086, 341520, 341955, 342392, 342829, 343267, 343707, 344148, 344589, 345032, 345476, 345921, 346368, 346815, 347264, 347714, 348165, 348617, 349070, 349525, 349981, 350437, 350896, 351355, 351815, 352277, 352740, 353204, 353669, 354136, 354604, 355073, 355543, 356015, 356487, 356962, 357437, 357913, 358391, 358870, 359351, 359833, 360316, 360800, 361285, 361772, 362261, 362750, 363241, 363733, 364227, 364722, 365218, 365715, 366214, 366715, 367216, 367719, 368224, 368730, 369237, 369745, 370255, 370767, 371280, 371794, 372309, 372827, 373345, 373865, 374386, 374909, 375434, 375960, 376487, 377016, 377546, 378078, 378611, 379146, 379682, 380220, 380759, 381300, 381842, 382386, 382932, 383479, 384027, 384578, 385129, 385683, 386238, 386794, 387352, 387912, 388473, 389036, 389601, 390167, 390735, 391305, 391876, 392449, 393024, 393600, 394178, 394758, 395339, 395922, 396507, 397093, 397682, 398272, 398863, 399457, 400052, 400649, 401248, 401849, 402451, 403056, 403662, 404270, 404880, 405491, 406105, 406720, 407337, 407956, 408577, 409200, 409825, 410451, 411080, 411710, 412343, 412977, 413613, 414252, 414892, 415534, 416179, 416825, 417473, 418123, 418776, 419430, 420086, 420745, 421405, 422068, 422733, 423399, 424068, 424739, 425412, 426088, 426765, 427444, 428126, 428810, 429496, 430185, 430875, 431568, 432263, 432960, 433659, 434361, 435065, 435771, 436480, 437191, 437904, 438620, 439337, 440058, 440780, 441505, 442233, 442962, 443694, 444429, 445166, 445906, 446648, 447392, 448139, 448888, 449640, 450395, 451152, 451911, 452673, 453438, 454205, 454975, 455747, 456522, 457300, 458080, 458864, 459649, 460438, 461229, 462023, 462819, 463619, 464421, 465226, 466033, 466844, 467657, 468473, 469292, 470114, 470939, 471767, 472597, 473431, 474267, 475107, 475949, 476794, 477643, 478494, 479349, 480206, 481067, 481930, 482797, 483667, 484540, 485416, 486296, 487178, 488064, 488953, 489845, 490741, 491640, 492542, 493447, 494356, 495268, 496183, 497102, 498024, 498950, 499879, 500812, 501748, 502688, 503631, 504577, 505528, 506481, 507439, 508400, 509365, 510333, 511305, 512281, 513260, 514244, 515231, 516222, 517216, 518215, 519217, 520223, 521233, 522247, 523265, 524288, 525314, 526344, 527378, 528416, 529458, 530504, 531555, 532610, 533668, 534731, 535799, 536870, 537946, 539027, 540111, 541200, 542293, 543391, 544493, 545600, 546711, 547827, 548947, 550072, 551202, 552336, 553475, 554618, 555766, 556920, 558077, 559240, 560408, 561580, 562757, 563940, 565127, 566319, 567516, 568719, 569926, 571139, 572357, 573580, 574808, 576041, 577280, 578524, 579774, 581029, 582289, 583555, 584826, 586103, 587386, 588674, 589968, 591267, 592572, 593883, 595200, 596523, 597851, 599186, 600526, 601873, 603225, 604584, 605949, 607320, 608697, 610080, 611470, 612866, 614268, 615677, 617093, 618514, 619943, 621378, 622820, 624268, 625723, 627185, 628654, 630130, 631612, 633102, 634599, 636102, 637613, 639132, 640657, 642190, 643730, 645277, 646832, 648394, 649964, 651542, 653127, 654720, 656321, 657930, 659546, 661171, 662803, 664444, 666092, 667749, 669415, 671088, 672770, 674460, 676159, 677867, 679583, 681308, 683041, 684784, 686535, 688296, 690065, 691843, 693631, 695428, 697234, 699050, 700875, 702710, 704555, 706409, 708272, 710146, 712030, 713924, 715827, 717741, 719666, 721600, 723545, 725501, 727467, 729444, 731431, 733430, 735439, 737460, 739491, 741534, 743588, 745654, 747731, 749819, 751920, 754032, 756156, 758292, 760440, 762600, 764773, 766958, 769156, 771366, 773589, 775825, 778073, 780335, 782610, 784898, 787200, 789516, 791845, 794187, 796544, 798915, 801299, 803698, 806112, 808540, 810983, 813440, 815913, 818400, 820903, 823421, 825955, 828504, 831069, 833650, 836247, 838860, 841490, 844136, 846799, 849479, 852176, 854889, 857621, 860370, 863136, 865920, 868723, 871543, 874382, 877240, 880116, 883011, 885925, 888859, 891812, 894784, 897777, 900790, 903823, 906876, 909950, 913045, 916161, 919299, 922458, 925639, 928842, 932067, 935315, 938585, 941878, 945195, 948535, 951898, 955286, 958698, 962134, 965595, 969081, 972592, 976128, 979691, 983280, 986895, 990536, 994205, 997901, 1001624, 1005376, 1009155, 1012963, 1016800, 1020667, 1024562, 1028488, 1032444, 1036430, 1040447, 1044495, 1048576, 1052688, 1056832, 1061009, 1065220, 1069463, 1073741, 1078054, 1082401, 1086783, 1091201, 1095654, 1100145, 1104672, 1109237, 1113840, 1118481, 1123160, 1127880, 1132639, 1137438, 1142278, 1147160, 1152083, 1157049, 1162058, 1167110, 1172207, 1177348, 1182535, 1187767, 1193046, 1198372, 1203746, 1209168, 1214640, 1220161, 1225732, 1231355, 1237029, 1242756, 1248537, 1254371, 1260260, 1266204, 1272205, 1278264, 1284380, 1290555, 1296789, 1303084, 1309441, 1315860, 1322342, 1328888, 1335499, 1342177, 1348921, 1355734, 1362616, 1369568, 1376592, 1383687, 1390857, 1398101, 1405421, 1412818, 1420293, 1427848, 1435483, 1443201, 1451002, 1458888, 1466860, 1474920, 1483068, 1491308, 1499639, 1508064, 1516584, 1525201, 1533916, 1542732, 1551650, 1560671, 1569797, 1579032, 1588375, 1597830, 1607397, 1617081, 1626881, 1636801, 1646843, 1657008, 1667300, 1677721, 1688273, 1698958, 1709779, 1720740, 1731841, 1743087, 1754480, 1766022, 1777718, 1789569, 1801580, 1813753, 1826091, 1838599, 1851279, 1864135, 1877171, 1890390, 1903797, 1917396, 1931190, 1945184, 1959382, 1973790, 1988410, 2003249, 2018311, 2033601, 2049125, 2064888, 2080895, 2097152, 2113665, 2130440, 2147483, 2164802, 2182402, 2200290, 2218474, 2236962, 2255760, 2274876, 2294320, 2314098, 2334221, 2354696, 2375535, 2396745, 2418337, 2440322, 2462710, 2485513, 2508742, 2532409, 2556528, 2581110, 2606169, 2631720, 2657776, 2684354, 2711469, 2739137, 2767375, 2796202, 2825636, 2855696, 2886402, 2917776, 2949840, 2982616, 3016128, 3050402, 3085465, 3121342, 3158064, 3195660, 3234162, 3273603, 3314017, 3355443, 3397917, 3441480, 3486174, 3532045, 3579139, 3627506, 3677198, 3728270, 3780781, 3834792, 3890368, 3947580, 4006499, 4067203, 4129776, 4194304, 4260880, 4329604, 4400581, 4473924, 4549753, 4628197, 4709393, 4793490, 4880644, 4971026, 5064819, 5162220, 5263440, 5368709, 5478274, 5592405, 5711392, 5835553, 5965232, 6100805, 6242685, 6391320, 6547206, 6710886, 6882960, 7064090, 7255012, 7456540, 7669584, 7895160, 8134407, 8388608, 8659208, 8947848, 9256395, 9586980, 9942053, 10324440, 10737418, 11184810, 11671106, 12201611, 12782640, 13421772, 14128181, 14913080, 15790320, 16777216, 17895697, 19173961, 20648881, 22369621, 24403223, 26843545, 29826161, 33554432, 38347922, 44739242, 53687091, 67108864, 89478485, 134217728, 268435456)
  var weights_BRAM_contents = ArrayBuffer

  // TODO: Create BRAM parameter(s) allowing the contents to be customized.
  class SoCDUT extends Component {
    val io = new Bundle {
      val control = slave Stream(UInt(10 bits))
      val result = master Stream(Bits(32 bits))
      val debug_state = out Bits(2 bits)
      val debug_input = out Bits(32 bits)
      val debug_weights = out Vec(Bits(32 bits), 7)
      val debug_accum = out Vec(Bits(32 bits), 7)
      val debug_accum_count = out UInt(10 bits) 
      val debug_address_count = out UInt(10 bits)
    }
    val bram = new ArrayBuffer[BRAMMemory]()
    bram.append(new BRAMMemory(BRAMConfig(dataWidth=32, addressWidth=10), initialContent=input_BRAM_contents.map(_.toString).map("32'd"+ _).map(B(_))))
    for (i <- 1 to 7) { bram.append(new BRAMMemory(BRAMConfig(dataWidth=32, addressWidth=10), initialContent=weights_BRAM_contents.map(_.toString).map("32'd"+ _).map(B(_)))) }

    val fp_core = new ForwardPass()
    fp_core.io.control << io.control
    fp_core.io.result >> io.result
    for (i <- 0 to 7) {
      fp_core.io.bram(i) >> bram(i).bus
    }
    io.debug_state := fp_core.io.debug_state
    io.debug_input := fp_core.io.debug_input
    io.debug_weights := fp_core.io.debug_weights
    io.debug_accum := fp_core.io.debug_accum
    io.debug_accum_count := fp_core.io.debug_accum_count
    io.debug_address_count := fp_core.io.debug_address_count
  }

  def main(args: Array[String]): Unit = {
    // Compile the simulator
    val compiled = SimConfig.withWave.allOptimisation.compile{
      // TODO: Try making a ClockDomain with the right parameters, and stim that once it's wired in.
      //rtl = ClockDomain.external("", withReset = true, withClockEnable = true) on new SoCDUT()
      val rtl = ClockDomain.external("", withReset = true, withClockEnable = true) on new SoCDUT()
      rtl
    }

    // Run the simulation
    compiled.doSim{dut =>
      val queueModel = mutable.Queue[Long]()

      dut.clockDomain.assertClockEnable()
      dut.clockDomain.forkStimulus(period = 10)
      //SimTimeout(1000000*10)
      //val result_ready #= dut.io.result.ready
      dut.io.control.valid #= true
      dut.io.control.payload #= 10
      dut.io.result.ready #= true
      for (i <- 0 to 50) {
        dut.clockDomain.waitSampling()
        val result_valid: Boolean = dut.io.result.valid.toBoolean
        val result_payload: BigInt = dut.io.result.payload.toBigInt
        val d_state = states(dut.io.debug_state.toInt)
        val debug_accum0: BigInt = dut.io.debug_accum(0).toBigInt
        val debug_accum1: BigInt = dut.io.debug_accum(1).toBigInt
        val debug_accum2: BigInt = dut.io.debug_accum(2).toBigInt
        val debug_accum3: BigInt = dut.io.debug_accum(3).toBigInt
        val d_i0: BigInt = dut.io.debug_input.toBigInt
        val d_w0: BigInt = dut.io.debug_weights(0).toBigInt
        val d_address_count: BigInt = dut.io.debug_address_count.toBigInt
        val d_accum_count: BigInt = dut.io.debug_accum_count.toBigInt
        if (result_valid) {
          println(s"Cycle: ${i} S: ${d_state} Result: ${result_valid}, ${result_payload}, Acc0: ${debug_accum0}, I0: ${d_i0} W0: ${d_w0}, F:${d_address_count} W:${d_accum_count}, Expected: ...")
        } else {
          println(s"Cycle: ${i} S: ${d_state} Result: ${result_valid}, ${result_payload} Acc0: ${debug_accum0}, I0: ${d_i0} W0: ${d_w0}, F:${d_address_count} W:${d_accum_count}")
        }
      }
    }

  }
}


